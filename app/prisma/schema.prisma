// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  password       String
  name           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  baseResumes    BaseResume[]
  jobDescriptions JobDescription[]
  customResumes  CustomResume[]
  coverLetters   CoverLetter[]
}

model BaseResume {
  id             String           @id @default(uuid())
  title          String
  content        Json             // For general resume content like summary, contact info, etc.
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  customResumes  CustomResume[]
  experiences    Experience[]     // Job experiences
  educations     Education[]      // Educational background
  skills         Skill[]          // Skills
}

model Experience {
  id             String           @id @default(uuid())
  company        String
  position       String
  location       String?
  startDate      DateTime
  endDate        DateTime?        // Null if current position
  description    String
  highlights     Json             // Store as JSON array of strings
  baseResumeId   String
  baseResume     BaseResume       @relation(fields: [baseResumeId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Education {
  id             String           @id @default(uuid())
  institution    String
  degree         String
  fieldOfStudy   String?
  location       String?
  startDate      DateTime
  endDate        DateTime?        // Null if in progress
  gpa            String?
  description    String?
  baseResumeId   String
  baseResume     BaseResume       @relation(fields: [baseResumeId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Skill {
  id             String           @id @default(uuid())
  name           String
  level          String?          // e.g., "Beginner", "Intermediate", "Advanced"
  category       String?          // e.g., "Technical", "Soft Skills", "Languages"
  baseResumeId   String
  baseResume     BaseResume       @relation(fields: [baseResumeId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model JobDescription {
  id             String           @id @default(uuid())
  title          String
  company        String
  content        String
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  customResumes  CustomResume[]
  coverLetters   CoverLetter[]
}

model CustomResume {
  id                String         @id @default(uuid())
  title             String
  content           Json
  baseResumeId      String
  baseResume        BaseResume     @relation(fields: [baseResumeId], references: [id], onDelete: Cascade)
  jobDescriptionId  String
  jobDescription    JobDescription @relation(fields: [jobDescriptionId], references: [id], onDelete: Cascade)
  userId            String
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model CoverLetter {
  id                String         @id @default(uuid())
  title             String
  content           String
  jobDescriptionId  String
  jobDescription    JobDescription @relation(fields: [jobDescriptionId], references: [id], onDelete: Cascade)
  userId            String
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}
